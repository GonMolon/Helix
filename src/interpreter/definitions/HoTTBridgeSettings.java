/**
 ******************************************************************************
 *
 * @file       HoTTBridgeSettings.java
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Template for an uavobject in java
 *             This is a autogenerated file!! Do not modify and expect a result.
 *             Settings for the @ref HoTT Telemetry Module
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package org.openpilot.uavtalk.uavobjects;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import org.openpilot.uavtalk.UAVObjectManager;
import org.openpilot.uavtalk.UAVObject;
import org.openpilot.uavtalk.UAVDataObject;
import org.openpilot.uavtalk.UAVObjectField;

/**
Settings for the @ref HoTT Telemetry Module

generated from hottbridgesettings.xml
 **/
public class HoTTBridgeSettings extends UAVDataObject {

	public HoTTBridgeSettings() {
		super(OBJID, ISSINGLEINST, ISSETTINGS, NAME);
		
		List<UAVObjectField> fields = new ArrayList<UAVObjectField>();
		

		List<String> LimitElemNames = new ArrayList<String>();
		LimitElemNames.add("MinSpeed");
		LimitElemNames.add("MaxSpeed");
		LimitElemNames.add("NegDifference1");
		LimitElemNames.add("PosDifference1");
		LimitElemNames.add("NegDifference2");
		LimitElemNames.add("PosDifference2");
		LimitElemNames.add("MinHeight");
		LimitElemNames.add("MaxHeight");
		LimitElemNames.add("MaxDistance");
		LimitElemNames.add("MinPowerVoltage");
		LimitElemNames.add("MaxPowerVoltage");
		LimitElemNames.add("MinSensor1Voltage");
		LimitElemNames.add("MaxSensor1Voltage");
		LimitElemNames.add("MinSensor2Voltage");
		LimitElemNames.add("MaxSensor2Voltage");
		LimitElemNames.add("MinCellVoltage");
		LimitElemNames.add("MaxCurrent");
		LimitElemNames.add("MaxUsedCapacity");
		LimitElemNames.add("MinSensor1Temp");
		LimitElemNames.add("MaxSensor1Temp");
		LimitElemNames.add("MinSensor2Temp");
		LimitElemNames.add("MaxSensor2Temp");
		LimitElemNames.add("MaxServoTemp");
		LimitElemNames.add("MinRPM");
		LimitElemNames.add("MaxRPM");
		LimitElemNames.add("MinFuel");
		LimitElemNames.add("MaxServoDifference");
		fields.add( new UAVObjectField("Limit", "(km/h)/(m/s)/m/V/A/mAh/C/ml", UAVObjectField.FieldType.FLOAT32, LimitElemNames, null) );

		List<String> SensorElemNames = new ArrayList<String>();
		SensorElemNames.add("VARIO");
		SensorElemNames.add("GPS");
		SensorElemNames.add("EAM");
		SensorElemNames.add("GAM");
		SensorElemNames.add("ESC");
		List<String> SensorEnumOptions = new ArrayList<String>();
		SensorEnumOptions.add("Disabled");
		SensorEnumOptions.add("Enabled");
		fields.add( new UAVObjectField("Sensor", "", UAVObjectField.FieldType.ENUM, SensorElemNames, SensorEnumOptions) );

		List<String> WarningElemNames = new ArrayList<String>();
		WarningElemNames.add("AltitudeBeep");
		WarningElemNames.add("MinSpeed");
		WarningElemNames.add("MaxSpeed");
		WarningElemNames.add("NegDifference1");
		WarningElemNames.add("PosDifference1");
		WarningElemNames.add("NegDifference2");
		WarningElemNames.add("PosDifference2");
		WarningElemNames.add("MinHeight");
		WarningElemNames.add("MaxHeight");
		WarningElemNames.add("MaxDistance");
		WarningElemNames.add("MinPowerVoltage");
		WarningElemNames.add("MaxPowerVoltage");
		WarningElemNames.add("MinSensor1Voltage");
		WarningElemNames.add("MaxSensor1Voltage");
		WarningElemNames.add("MinSensor2Voltage");
		WarningElemNames.add("MaxSensor2Voltage");
		WarningElemNames.add("MinCellVoltage");
		WarningElemNames.add("MaxCurrent");
		WarningElemNames.add("MaxUsedCapacity");
		WarningElemNames.add("MinSensor1Temp");
		WarningElemNames.add("MaxSensor1Temp");
		WarningElemNames.add("MinSensor2Temp");
		WarningElemNames.add("MaxSensor2Temp");
		WarningElemNames.add("MaxServoTemp");
		WarningElemNames.add("MinRPM");
		WarningElemNames.add("MaxRPM");
		WarningElemNames.add("MinFuel");
		WarningElemNames.add("MaxServoDifference");
		List<String> WarningEnumOptions = new ArrayList<String>();
		WarningEnumOptions.add("Disabled");
		WarningEnumOptions.add("Enabled");
		fields.add( new UAVObjectField("Warning", "", UAVObjectField.FieldType.ENUM, WarningElemNames, WarningEnumOptions) );


		// Compute the number of bytes for this object
		int numBytes = 0;
		ListIterator<UAVObjectField> li = fields.listIterator();
		while(li.hasNext()) {
			numBytes += li.next().getNumBytes();
		}
		NUMBYTES = numBytes;

		// Initialize object
		initializeFields(fields, ByteBuffer.allocate(NUMBYTES), NUMBYTES);
		// Set the default field values
		setDefaultFieldValues();
		// Set the object description
		setDescription(DESCRIPTION);
	}

	/**
	 * Create a Metadata object filled with default values for this object
	 * @return Metadata object with default values
	 */
	public Metadata getDefaultMetadata() {
		UAVObject.Metadata metadata = new UAVObject.Metadata();
    	metadata.flags =
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_ACCESS_SHIFT |
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_GCS_ACCESS_SHIFT |
		    1 << UAVOBJ_TELEMETRY_ACKED_SHIFT |
		    1 << UAVOBJ_GCS_TELEMETRY_ACKED_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_GCS_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_MANUAL) << UAVOBJ_LOGGING_UPDATE_MODE_SHIFT;
    	metadata.flightTelemetryUpdatePeriod = 0;
    	metadata.gcsTelemetryUpdatePeriod = 0;
    	metadata.loggingUpdatePeriod = 0;
 
		return metadata;
	}

	/**
	 * Initialize object fields with the default values.
	 * If a default value is not specified the object fields
	 * will be initialized to zero.
	 */
	public void setDefaultFieldValues()
	{
		getField("Limit").setValue(30,0);
		getField("Limit").setValue(100,1);
		getField("Limit").setValue(-10,2);
		getField("Limit").setValue(10,3);
		getField("Limit").setValue(-1,4);
		getField("Limit").setValue(1,5);
		getField("Limit").setValue(20,6);
		getField("Limit").setValue(500,7);
		getField("Limit").setValue(1500,8);
		getField("Limit").setValue(5,9);
		getField("Limit").setValue(30,10);
		getField("Limit").setValue(5,11);
		getField("Limit").setValue(30,12);
		getField("Limit").setValue(5,13);
		getField("Limit").setValue(30,14);
		getField("Limit").setValue(3.3,15);
		getField("Limit").setValue(40,16);
		getField("Limit").setValue(2000,17);
		getField("Limit").setValue(0,18);
		getField("Limit").setValue(100,19);
		getField("Limit").setValue(0,20);
		getField("Limit").setValue(100,21);
		getField("Limit").setValue(100,22);
		getField("Limit").setValue(100,23);
		getField("Limit").setValue(7000,24);
		getField("Limit").setValue(1000,25);
		getField("Limit").setValue(0,26);
		getField("Sensor").setValue("Disabled",0);
		getField("Sensor").setValue("Disabled",1);
		getField("Sensor").setValue("Disabled",2);
		getField("Sensor").setValue("Disabled",3);
		getField("Sensor").setValue("Disabled",4);
		getField("Warning").setValue("Disabled",0);
		getField("Warning").setValue("Disabled",1);
		getField("Warning").setValue("Disabled",2);
		getField("Warning").setValue("Disabled",3);
		getField("Warning").setValue("Disabled",4);
		getField("Warning").setValue("Disabled",5);
		getField("Warning").setValue("Disabled",6);
		getField("Warning").setValue("Disabled",7);
		getField("Warning").setValue("Disabled",8);
		getField("Warning").setValue("Disabled",9);
		getField("Warning").setValue("Disabled",10);
		getField("Warning").setValue("Disabled",11);
		getField("Warning").setValue("Disabled",12);
		getField("Warning").setValue("Disabled",13);
		getField("Warning").setValue("Disabled",14);
		getField("Warning").setValue("Disabled",15);
		getField("Warning").setValue("Disabled",16);
		getField("Warning").setValue("Disabled",17);
		getField("Warning").setValue("Disabled",18);
		getField("Warning").setValue("Disabled",19);
		getField("Warning").setValue("Disabled",20);
		getField("Warning").setValue("Disabled",21);
		getField("Warning").setValue("Disabled",22);
		getField("Warning").setValue("Disabled",23);
		getField("Warning").setValue("Disabled",24);
		getField("Warning").setValue("Disabled",25);
		getField("Warning").setValue("Disabled",26);
		getField("Warning").setValue("Disabled",27);

	}

	/**
	 * Create a clone of this object, a new instance ID must be specified.
	 * Do not use this function directly to create new instances, the
	 * UAVObjectManager should be used instead.
	 */
	public UAVDataObject clone(long instID) {
		// TODO: Need to get specific instance to clone
		try {
			HoTTBridgeSettings obj = new HoTTBridgeSettings();
			obj.initialize(instID, this.getMetaObject());
			return obj;
		} catch  (Exception e) {
			return null;
		}
	}

	/**
	 * Returns a new instance of this UAVDataObject with default field
	 * values. This is intended to be used by 'reset to default' functionality.
	 * 
	 * @return new instance of this class with default values.
	 */
	@Override
	public UAVDataObject getDefaultInstance(){
		return new HoTTBridgeSettings();
	}

	/**
	 * Static function to retrieve an instance of the object.
	 */
	public HoTTBridgeSettings GetInstance(UAVObjectManager objMngr, long instID)
	{
	    return (HoTTBridgeSettings)(objMngr.getObject(HoTTBridgeSettings.OBJID, instID));
	}

	// Constants
	protected static final long OBJID = 0xE1F7BD4Al;
	protected static final String NAME = "HoTTBridgeSettings";
	protected static String DESCRIPTION = "Settings for the @ref HoTT Telemetry Module";
	protected static final boolean ISSINGLEINST = 1 > 0;
	protected static final boolean ISSETTINGS = 1 > 0;
	protected static int NUMBYTES = 0;


}
